Constraints
===========

The :py:mod:`~tdda.constraints` module provides support for
constraint generation, verification and anomaly detection for datasets,
including CSV files and Pandas DataFrames.

The module includes:

* A :ref:`tdda_command_line_tool` for discovering constraints in data
  from various sources, and for verifying data against those constraints,
  using the ``.tdda`` :ref:`tdda_json_file_format`.
* A Python library :py:mod:`~tdda.constraints` containing classes that
  implement constraint discovery and validation, for use from within
  other Python programs.
* Python implementations of constraint discovery, verification and
  and anomaly detection for a number of data sources:

  - CSV files
  - Pandas and R DataFrames saved as ``.feather`` files
  - PostgreSQL database tables (``postgres:``)
  - MySQL database tables (``mysql:``)
  - SQLite database tables (``sqlite:``)
  - MongoDB document collections (``mongodb``)

Python Prerequisites
--------------------

* :py:mod:`numpy` and :py:mod:`pandas` (required for CSV files and
  :py:mod:`feather` files)
* :py:mod:`feather-format` (required for :py:mod:`feather` files)
* :py:mod:`pygresql` (required for PostgreSQL database tables)
* :py:mod:`mysql` (required for MySQL database tables)

These can be installed with (some/all of)::

    pip install numpy
    pip install pandas
    pip install feather-format
    pip install pygresql
    pip install mysql-python

The :py:mod:`sqlite3` module is provided by default as part of the
standard Python libraries, so SQLite database tables can be used without
having to explicitly install it.

To install :py:mod:`feather-format` on Windows, you will need to install
:py:mod:`cython` as a prerequisite, which might also require you to install
the Microsoft Visual C++ compiler for python, from http://aka.ms/vcpython27.


.. _tdda_command_line_tool:

Command-line Tool
-----------------

The ``tdda`` command-line utility provides a tool for discovering constraints
in data and saving them as a ``.tdda`` file using the
:ref:`tdda_json_file_format`, and also for verifying constraints in
data against a previously prepared ``.tdda`` file.

It also provides some other functionality to help with using the tool.
It takes commands in the following forms:

* :ref:`tdda_discover_tool` to perform constraint discovery.
* :ref:`tdda_verify_tool` to verify data against constraints.
* :ref:`tdda_detect_tool` to detect anomalies in data by checking constraints.
* ``tdda examples`` to copy example data and code where you can see them.
* ``tdda help`` to show help on how to use the tool.
* ``tdda test`` to run the TDDA library's internal tests.

See :ref:`examples` for more detail on the code and data
examples that are included as part of the ``tdda`` package.

See :ref:`tests` for more detail on the ``tdda`` package's own tests,
used to test that the package is installed and configured correctly.


.. _tdda_discover_tool:

*tdda discover*
~~~~~~~~~~~~~~~

Discover TDDA constraints for data from various sources, and save the
generated constraints as a :ref:`tdda_json_file_format` file.

Usage::

    tdda discover [FLAGS] input [constraints.tdda]

where

  * *input* is one of:

    - a CSV file
    - a ``-``, meaning it will read a csv file from standard input
    - a :py:mod:`feather` file containing a DataFrame, with extension
      ``.feather``
    - a database table

  * *constraints.tdda*, if provided, specifies the name of a file to
    which the generated constraints will be written.

If no constraints output file is provided, or is ``-``, the generated constraints
are written to standard output.

Optional flags are:

    - ``-r`` or ``--rex``    to include regular expression generation
    - ``-R`` or ``--norex``  to exclude regular expression generation

See :ref:`tdda_csv_file` for details of how a CSV file is read.

See :ref:`tdda_db_table` for details of how database tables are accessed.


.. _tdda_verify_tool:

*tdda verify*
~~~~~~~~~~~~~

Verify data from various sources, against constraints from a
:ref:`tdda_json_file_format` constraints file.

Usage::

    tdda verify [FLAGS] input [constraints.tdda]

where:

* *input* is one of:

  - a csv file
  - a ``-``, meaning it will read a csv file from standard input
  - a :py:mod:`feather` file containing a DataFrame, with extension
    ``.feather``
  - a database table

* *constraints.tdda*, if provided, is a JSON *.tdda* file
  constaining constraints.

If no constraints file is provided and the input is a CSV or feather file,
a constraints file with the same path as the input file, but with a *.tdda*
extension, will be used.

For database tables, the constraints file parameter is mandatory.

Optional flags are:

* ``-a``, ``--all``
    Report all fields, even if there are no failures
* ``-f``, ``--fields``
    Report only fields with failures
* ``-7``, ``--ascii``
    Report in ASCII form, without using special characters.
* ``--epsilon E``
    Use this value of epsilon for fuzziness in comparing numeric values.
* ``--type_checking strict|sloppy``
    By default, type-checking is sloppy, meaning that when checking type
    constraints, all numeric types are considered to be equivalent. With
    strict typing, ``int`` is considered different from ``real``.

See :ref:`tdda_csv_file` for details of how a CSV file is read.

See :ref:`tdda_db_table` for details of how database tables are accessed.


.. _tdda_detect_tool:

*tdda detect*
~~~~~~~~~~~~~

Detect anomalies on data from various sources, by checking against
constraints from a :ref:`tdda_json_file_format` constraints file.

Usage::

    tdda detect [FLAGS] input constraints.tdda output

where:

* *input* is one of:

  - a csv file name
  - a ``-``, meaning it will read a csv file from standard input
  - a :py:mod:`feather` file containing a DataFrame, with extension
    ``.feather``
  - a database table

* *constraints.tdda*, is a JSON *.tdda* file constaining constraints.

* *output* is one of:

  - a csv file to be created containing failing records
  - a ``-``, meaning it will write the  csv file containing
    failing records to standard output
  - a :py:mod:`feather` file with extension ``.feather``, to be created
    containing a DataFrame of failing records

If no constraints file is provided and the input is a CSV or feather file,
a constraints file with the same path as the input file, but with a *.tdda*
extension, will be used.

Optional flags are:

* ``-a``, ``--all``
    Report all fields, even if there are no failures
* ``-f``, ``--fields``
    Report only fields with failures
* ``-7``, ``--ascii``
    Report in ASCII form, without using special characters.
* ``--epsilon E``
    Use this value of epsilon for fuzziness in comparing numeric values.
* ``--type_checking strict|sloppy``
    By default, type-checking is sloppy, meaning that when checking type
    constraints, all numeric types are considered to be equivalent. With
    strict typing, ``int`` is considered different from ``real``.
* ``--write-all``
    Include passing records in the output.
* ``--per-constraint``
    Write one column per failing constraint, as well as the ``n_failures``
    total column for each row.
* ``--output-fields FIELD1 FIELD2 ...``
    Specify original columns to write out. If used with no field names,
    all original columns will be included.
* ``--index``
    Include a row-number index in the output file. The row number is
    automatically included if no output fields are specified. Rows are
    usually numbered from 1, unless the (feather) input file already has
    an index.
  
If no records fail any of the constraints, then no output file is
created (and if the output file already exists, it is deleted).

See :ref:`tdda_csv_file` for details of how a CSV file is read.

See :ref:`tdda_db_table` for details of how database tables are accessed.


.. _tdda_csv_file:

Constraints for CSV Files and Pandas DataFrames
-----------------------------------------------

.. automodule:: tdda.constraints.pd.constraints
    :members: discover_df, verify_df, detect_df, PandasConstraintCalculator, PandasConstraintDetector, PandasConstraintVerifier, PandasConstraintDiscoverer, PandasVerification, PandasDetection

If a CSV file is used with the ``tdda`` command-line tool, it will be
processed by the standard Pandas CSV file reader with the following settings:

* ``index_col`` is ``None``
* ``infer_datetime_format`` is ``True``
* ``quotechar`` is ``"``
* ``quoting`` is :py:const:`csv.QUOTE_MINIMAL`
* ``escapechar`` is ``\\`` (backslash)
* ``na_values`` are the empty string, ``"NaN"``, and ``"NULL"``
* ``keep_default_na`` is ``False``


.. _tdda_db_table:

Constraints for Databases
-------------------------

When a database table is used with the ``tdda`` command-line tool, the table
name (including an optional schema) can be preceded by ``DBTYPE`` chosen
from ``postgres``, ``mysql``, ``sqlite`` or ``mongodb``:
::

    DBTYPE:schema.tablename

If ``DBTYPE`` is used, this will cause the file ``.tdda_db_conn_DBTYPE``
to be read from your home directory (see :ref:`tdda_db_conn`), which can
contain all connection parameters.

Parameters can also be provided using the following flags (which override
the values in the ``.tdda_db_conn_DBTYPE`` file, if provided):

* ``-conn FILE``
    Database connection file (see :ref:`tdda_db_conn`)
* ``-dbtype DBTYPE``
    Type of database
* ``-db DATABASE``
    Name of database to connect to
* ``-host HOSTNAME``
    Name of server to connect to
* ``-port PORTNUMBER``
    IP port number to connect to
* ``-user USERNAME``
    Username to connect as
* ``-password PASSWORD``
    Password to authenticate with

If ``-conn`` is provided, then none of the other options are required, and
the database connection details are read from the specified file.

If the database type is specified (with the ``-dbtype`` option, or by
prefixing the table name, such as ``postgres:mytable``), then a default
connection file ``.tdda_db_conn_DBTYPE`` (in your home directory) is used,
if present.


.. _tdda_db_conn:

Database Connection Files
~~~~~~~~~~~~~~~~~~~~~~~~~

To use a database source, you can either specify the database type
using the ``--dbtype DBTYPE`` option, or you can prefix the table name
with ``DBTYPE:``.

You can provide default values for all of the other database options in
a database connection file ``.tdda_db_conn_DBTYPE``, in your home directory.

Any database-related options passed in on the command line will
override the default settings from the connection file.

A ``tdda_db_conn_DBTYPE`` file is a JSON file of the form::

    {
        "dbtype": DBTYPE,
        "db": DATABASE,
        "host": HOSTNAME,
        "port": PORTNUMBER,
        "user": USERNAME,
        "password": PASSWORD,
        "schema": SCHEMA,
    }

All the entries are optional.

If a ``password`` is provided, then care should be taken to ensure that the
file has appropriate filesystem permissions so that it cannot be read by
other users.

If a ``schema`` is provided, then it will be used as the default schema,
when constraints are discovered or verified on a table name with no
schema specified.


API
~~~

.. automodule:: tdda.constraints.db.constraints
    :members: discover_db_table, verify_db_table, DatabaseConstraintCalculator, DatabaseConstraintVerifier, DatabaseVerification, DatabaseConstraintDiscoverer

Extension Framework
-------------------

.. automodule:: tdda.constraints.extension
    :members:

Constraints API
---------------

.. automodule:: tdda.constraints.baseconstraints
    :members:

Underlying API Classes
~~~~~~~~~~~~~~~~~~~~~~

.. automodule:: tdda.constraints.base
    :members: DatasetConstraints, FieldConstraints, MultiFieldConstraints, Constraint, MinConstraint, MaxConstraint, SignConstraint, TypeConstraint, MaxNullsConstraint, NoDuplicatesConstraint, AllowedValuesConstraint, MinLengthConstraint, MaxLengthConstraint, LtConstraint, LteConstraint, EqConstraint, GtConstraint, GteConstraint, RexConstraint, Verification


.. _tdda_json_file_format:

TDDA JSON file format
---------------------

A ``.tdda`` file is a JSON file containing a single JSON object of the form::

    {
        "fields": {
            field-name: field-constraints,
            ...
        }
    }

Each ``field-constraints`` item is a JSON object containing a property for
each included constraint::

    {
        "type": one of int, real, bool, string or date
        "min": minimum allowed value,
        "max": maximum allowed value,
        "min_length": minimum allowed string length (for string fields),
        "max_length": maximum allowed string length (for string fields),
        "max_nulls": maximum number of null values allowed,
        "sign": one of positive, negative, non-positive, non-negative,
        "no_duplicates": true if the field values must be unique,
        "values": list of distinct allowed values,
        "rex": list of regular expressions, to cover all cases
    }


.. _constraint_examples:

Examples
--------
.. automodule:: tdda.constraints.examples
    :members:
