<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="5" failures="0" skipped="0" tests="5" time="0.710" timestamp="2024-01-25T20:28:54.484758" hostname="192.168.1.170"><testcase classname="" name="tdda.deprecated.examples.test_using_writabletestcase" time="0.000"><error message="collection failure">ImportError while importing test module '/Users/neil/codebase/tdda-clone/tdda/deprecated/examples/test_using_writabletestcase.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/opt/homebrew/Cellar/python@3.10/3.10.13_2/Frameworks/Python.framework/Versions/3.10/lib/python3.10/importlib/__init__.py:126: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tdda/deprecated/examples/test_using_writabletestcase.py:20: in &lt;module&gt;
    from tdda.examples.generators import generate_string, generate_file
E   ModuleNotFoundError: No module named 'tdda.examples.generators'; 'tdda.examples' is not a package</error></testcase><testcase classname="" name="tdda.referencetest.examples.exercises-pytest.exercise2.test_all" time="0.000"><error message="collection failure">import file mismatch:
imported module 'test_all' has this __file__ attribute:
  /Users/neil/codebase/tdda-clone/tdda/referencetest/examples/exercises-pytest/exercise1/test_all.py
which is not the same as the test file we want to collect:
  /Users/neil/codebase/tdda-clone/tdda/referencetest/examples/exercises-pytest/exercise2/test_all.py
HINT: remove __pycache__ / .pyc files and/or use a unique basename for your test file modules</error></testcase><testcase classname="" name="tdda.referencetest.examples.exercises-unittest.exercise1.test_all" time="0.000"><error message="collection failure">import file mismatch:
imported module 'test_all' has this __file__ attribute:
  /Users/neil/codebase/tdda-clone/tdda/referencetest/examples/exercises-pytest/exercise1/test_all.py
which is not the same as the test file we want to collect:
  /Users/neil/codebase/tdda-clone/tdda/referencetest/examples/exercises-unittest/exercise1/test_all.py
HINT: remove __pycache__ / .pyc files and/or use a unique basename for your test file modules</error></testcase><testcase classname="" name="tdda.referencetest.examples.exercises-unittest.exercise2.test_all" time="0.000"><error message="collection failure">import file mismatch:
imported module 'test_all' has this __file__ attribute:
  /Users/neil/codebase/tdda-clone/tdda/referencetest/examples/exercises-pytest/exercise1/test_all.py
which is not the same as the test file we want to collect:
  /Users/neil/codebase/tdda-clone/tdda/referencetest/examples/exercises-unittest/exercise2/test_all.py
HINT: remove __pycache__ / .pyc files and/or use a unique basename for your test file modules</error></testcase><testcase classname="pytest" name="internal" time="0.000"><error message="internal error">Traceback (most recent call last):
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/_pytest/config/__init__.py", line 1611, in getoption
    val = getattr(self.option, name)
AttributeError: 'Namespace' object has no attribute 'tagged'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/_pytest/main.py", line 271, in wrap_session
    session.exitstatus = doit(config, session) or 0
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/_pytest/main.py", line 324, in _main
    config.hook.pytest_collection(session=session)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_hooks.py", line 501, in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_manager.py", line 119, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_callers.py", line 181, in _multicall
    return outcome.get_result()
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_result.py", line 99, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_callers.py", line 102, in _multicall
    res = hook_impl.function(*args)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/_pytest/main.py", line 335, in pytest_collection
    session.perform_collect()
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/_pytest/main.py", line 678, in perform_collect
    hook.pytest_collection_modifyitems(
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_hooks.py", line 501, in __call__
    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_manager.py", line 119, in _hookexec
    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_callers.py", line 181, in _multicall
    return outcome.get_result()
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_result.py", line 99, in get_result
    raise exc.with_traceback(exc.__traceback__)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/pluggy/_callers.py", line 102, in _multicall
    res = hook_impl.function(*args)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/tdda/referencetest/pytestconfig.py", line 31, in pytest_collection_modifyitems
    referencepytest.tagged(config, items)
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/tdda/referencetest/referencepytest.py", line 280, in tagged
    runtagged = config.getoption('--tagged')
  File "/Users/neil/codebase/tdda-clone/venv/lib/python3.10/site-packages/_pytest/config/__init__.py", line 1622, in getoption
    raise ValueError(f"no option named {name!r}") from e
ValueError: no option named 'tagged'</error></testcase></testsuite></testsuites>